name: Failed Build Test

# Run on both PR events and direct pushes
on:
  # This makes the workflow run for PRs
  pull_request:
    branches: [ build_failure_test2]
    types: [ opened, synchronize, reopened ]
  
  # Keep existing triggers (likely push events)
  push:
    branches: [ build_failure_test2]
  
  # If you had workflow_dispatch, keep it
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Fetch all history for PR association
          fetch-depth: 0
      
      # Your existing build steps here...
      
      # Add a step to capture PR info in metadata
      - name: Store PR metadata
        if: github.event_name == 'pull_request'
        run: |
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "PR_STATE=${{ github.event.pull_request.state }}" >> $GITHUB_ENV
          # Create a file with PR info that your app can read
          echo "{\"number\": ${{ github.event.pull_request.number }}, \"title\": \"${{ github.event.pull_request.title }}\", \"url\": \"${{ github.event.pull_request.html_url }}\"}" > pr-info.json
      
      # For builds not triggered by PRs, try to find associated PRs
      - name: Find Associated PRs
        if: github.event_name != 'pull_request'
        run: |
          # Install GitHub CLI
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI"
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # Authenticate GitHub CLI (requires a token with repo scope)
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          
          # Try to find PRs containing this commit
          echo "Searching for PRs containing commit ${{ github.sha }}"
          PR_INFO=$(gh pr list --search "${{ github.sha }}" --json number,title,url -q '.[0]')
          
          if [ -n "$PR_INFO" ]; then
            echo "Found associated PR in commit search"
            echo "$PR_INFO" > pr-info.json
          else
            # Try alternative: find PRs targeting this branch
            echo "Searching for PRs targeting ${{ github.ref_name }}"
            PR_INFO=$(gh pr list --base "${{ github.ref_name }}" --json number,title,url -q '.[0]')
            
            if [ -n "$PR_INFO" ]; then
              echo "Found PR targeting this branch"
              echo "$PR_INFO" > pr-info.json
            else
              echo "No associated PRs found"
              echo "{}" > pr-info.json
            fi
          fi
      
      # Upload PR info as an artifact
      - name: Upload PR metadata
        uses: actions/upload-artifact@v3
        with:
          name: pr-metadata
          path: pr-info.json
